<?php

class Withdraw extends AbstractEntity
{

	const USER_FIELD_NAME = 'user';

	protected static $DEFAULT_COLS = array(
		'id',
		'sum',
		'user_id',
		'organization_id',
		'comment',
		'response',
		'number',
		'status_type_code',
		'status_description'
	);

	protected static $ADDITIONAL_COLS = array(
		'created_at',
		'updated_at',
	);


	public function getParams(AbstractUser $user = null, array $fields = null): Result
	{
		$result_data = parent::getParams($user, $fields)->getData(); // TODO: Change the autogenerated stub

		if (isset($fields[self::USER_FIELD_NAME])) {
			$result_data[self::USER_FIELD_NAME] = UsersCollection::filter(App::DB(),
				$user,
				array('id' => $this->user_id),
				Fields::parseFields($fields[self::USER_FIELD_NAME]['fields'] ?? ''),
				array(
					'length' => $fields[self::USER_FIELD_NAME]['length'] ?? 1000,
					'offset' => $fields[self::USER_FIELD_NAME]['offset'] ?? App::DEFAULT_OFFSET
				),
				Fields::parseOrderBy($fields[self::USER_FIELD_NAME]['order_by'] ?? ''))->getData();
		}
		return new Result(true, '', $result_data);
	}


	public static function create(Organization $organization, User $user, array $data)
	{
		if (!$user->isAdmin($organization)) throw new PrivilegesException('', App::DB());
		$q_ins = App::queryFactory()->newInsert();
		$q_ins->into('organizations_withdraws')
			->cols(array(
				'sum' => $data['sum'],
				'number' => $data['number'] ?? null,
				'user_id' => $user->getId(),
				'organization_id' => $organization->getId(),
				'comment' => $data['comment'] ?? null,
			))
		->returning(array('*'));
		return new Result(true, '', App::DB()->prepareExecute($q_ins)->fetchAll());
	}
}