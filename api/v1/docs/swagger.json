{
  "swagger": "2.0",
  "info": {
    "description": "First version of Evendate API. Just take it and use.",
    "version": "1.0.0",
    "title": "Evendate API",
    "contact": {
      "email": "feedback@evendate.ru"
    }
  },
  "host": "",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Organization",
      "description": "Everything about organizations and subscriptions"
    },
    {
      "name": "Event",
      "description": "All about events in organizations"
    },
    {
      "name": "User",
      "description": "Current user and friends"
    },
    {
      "name": "Date",
      "description": "Events dates"
    },
    {
      "name": "Tag",
      "description": "Events tags"
    },
    {
      "name": "Statistics",
      "description": ""
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/organizations/": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get list of organizations",
        "description": "",
        "operationId": "getOrganizations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "short_name",
            "in": "query",
            "description": "Short name pattern of organizations to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name pattern of organizations to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Can get list of organizations with any roles",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description pattern of organizations to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "type_id",
            "in": "query",
            "description": "ID of organization type.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "strict",
            "in": "query",
            "description": "Changes `name`, `short_name` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create new organizations",
        "description": "",
        "operationId": "addOrganization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "new organization data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewOrganization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/organizations/recommendations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get list of organizations",
        "description": "",
        "operationId": "getOrganizationsRecommendations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "short_name",
            "in": "query",
            "description": "Short name pattern of organizations to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name pattern of organizations to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Can get list of organizations with any roles",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description pattern of organizations to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "type_id",
            "in": "query",
            "description": "ID of organization type.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "strict",
            "in": "query",
            "description": "Changes `name`, `short_name` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          }
        }
      }
    },
    "/organizations/{Id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find organization by ID",
        "description": "Returns a single organization",
        "operationId": "getOrganizationById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of organization to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          }
        }
      }
    },
    "/organizations/subscriptions": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get list of subscribed organizations",
        "description": "",
        "operationId": "getSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          }
        }
      }
    },
    "/organizations/types": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get list of organization types",
        "description": "",
        "operationId": "getOrganizationTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Type name pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Organization type ID",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationType"
              }
            }
          }
        }
      }
    },
    "/organizations/{Id}/staff": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get list of admins and moderators",
        "description": "",
        "operationId": "getStaff",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "ID of organization",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields. HAVE ADDITIONAL FIELD role",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "BadArgumentException"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Add new staff to organization",
        "description": "",
        "operationId": "addStaff",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "ID of organization user wants to subscribe",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "user_id",
            "description": "ID of user we want to add",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "role",
            "description": "Name of role",
            "required": true,
            "type": "string",
            "enum": [
              "admin",
              "moderator"
            ]
          }
        ],
        "responses": {
          "400": {
            "description": "BadArgumentException"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiResponse"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove staff from organization",
        "description": "",
        "operationId": "deleteStaff",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "ID of organization user wants to subscribe",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "user_id",
            "description": "ID of user we want to add",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "role",
            "description": "Name of role",
            "required": true,
            "type": "string",
            "enum": [
              "admin",
              "moderator"
            ]
          }
        ],
        "responses": {
          "400": {
            "description": "BadArgumentException"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiResponse"
              }
            }
          }
        }
      }
    },
    "/organizations/{Id}/subscriptions": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Add a new subscription to organization",
        "description": "",
        "operationId": "addSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "ID of organization user wants to subscribe",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "BadArgumentException"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiResponse"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove subscription to organization",
        "description": "",
        "operationId": "deleteSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "ID of organization user wants to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "BadArgumentException"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiResponse"
              }
            }
          }
        }
      }
    },
    "/tags/": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get list of tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name pattern of tags to search. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "query",
            "description": "Event ID to search for",
            "required": false,
            "type": "string"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "used_since",
            "description": "Tags used since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "used_till",
            "description": "Tags used till date",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          }
        }
      }
    },
    "/tags/{Id}": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get tag by ID",
        "description": "",
        "operationId": "getTag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "ID of tag",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          }
        }
      }
    },
    "/events/": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Create new event",
        "description": "",
        "operationId": "addEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "new event data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get events list",
        "description": "",
        "operationId": "getEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "description": "events in one day",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "query",
            "description": "search query",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "future",
            "description": "all future events",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "registered",
            "description": "all events where user registered",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "statistics",
            "description": "add statistics fields",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "canceled_shown",
            "description": "show/hide canceled events",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "is_delayed",
            "description": "get ONLY delayed events.[WARNING] works only with organization_id",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "is_canceled",
            "description": "get ONLY canceled events.[WARNING] works only with organization_id",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "since",
            "description": "events since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "changed_since",
            "description": "events changed or added since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Events with this tags. Supports searching by tag1*tag2 (logic AND) or tag1|tag2(logic OR)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "since",
            "description": "events till date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "title",
            "description": "events title pattern. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "strict",
            "description": "Changes `title` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "organization_id",
            "in": "query",
            "description": "Returns all events for one organization",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bounds",
            "in": "query",
            "description": "Returns all events in rectangle. You have to pass coordinates of two points: left-bottom and top-right separated with comma. Example: 55.7558 37.6173,56.7558 38.6173",
            "required": false,
            "type": "string"
          },
          {
            "name": "point",
            "in": "query",
            "description": "Returns all events in circle. You have to pass coordinates the center of circle: Example: 55.7558 37.6173. Also requires distance (in km).",
            "required": false,
            "type": "string"
          },
          {
            "name": "distance",
            "in": "query",
            "description": "Required for searching with point. Distance in km.",
            "required": false,
            "type": "float"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        }
      }
    },
    "/events/recommendations": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get events list",
        "description": "",
        "operationId": "getEventsRecommendations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "description": "events in one day",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "query",
            "description": "search query",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "future",
            "description": "all future events",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "canceled_shown",
            "description": "show/hide canceled events",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "since",
            "description": "events since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "changed_since",
            "description": "events changed or added since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Events with this tags. Supports searching by tag1*tag2 (logic AND) or tag1|tag2(logic OR)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "since",
            "description": "events till date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "title",
            "description": "events title pattern. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "strict",
            "description": "Changes `title` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "organization_id",
            "in": "query",
            "description": "Returns all events for one organization",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        }
      }
    },
    "/events/my": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get events feed for current user",
        "description": "",
        "operationId": "getMyEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "description": "events in one day",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "canceled_shown",
            "description": "show/hide canceled events",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "registered",
            "description": "all events where user registered",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "future",
            "description": "all future events",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "since",
            "description": "events since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "changed_since",
            "description": "events changed or added since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Events with this tags. Supports searching by tag1*tag2 (logic AND) or tag1|tag2(logic OR)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "since",
            "description": "events till date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "title",
            "description": "events title pattern. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "strict",
            "description": "Changes `title` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "bounds",
            "in": "query",
            "description": "Returns all events in rectangle. You have to pass coordinates of two points: left-bottom and top-right separated with comma. Example: 55.7558 37.6173,56.7558 38.6173",
            "required": false,
            "type": "string"
          },
          {
            "name": "point",
            "in": "query",
            "description": "Returns all events in circle. You have to pass coordinates the center of circle: Example: 55.7558 37.6173. Also requires distance (in km).",
            "required": false,
            "type": "string"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        }
      }
    },
    "/events/dates": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get events dates collection",
        "description": "",
        "operationId": "getEventsDates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "description": "Get all dates in one month. Format: YYYY-MM",
            "required": false,
            "type": "string"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Filter all dates since date.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "till",
            "in": "query",
            "description": "Filter all dates till date.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "event_id",
            "in": "query",
            "description": "Returns all dates for one event.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "unique",
            "in": "query",
            "description": "[WARN!] Changes behavior. If equals TRUE dates can contain two additional fields: `events_count` and `favorites_count` otherwise can't. Main use case: filter by month and set to true to get all days in month with events and favorites.",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "my",
            "in": "query",
            "description": "Returns only dates for my events",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "organization_id",
            "in": "query",
            "description": "Returns all dates for one organization.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiResponse"
              }
            }
          }
        }
      }
    },
    "/events/favorites": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get all actual (not past) favorite events",
        "description": "",
        "operationId": "getFavoriteEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "description": "events in one day",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "canceled_shown",
            "description": "show/hide canceled events",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "registered",
            "description": "all events where user registered",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "future",
            "description": "all future events",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "since",
            "description": "events since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "changed_since",
            "description": "events changed or added since date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Events with this tags. Supports searching by tag1*tag2 (logic AND) or tag1|tag2(logic OR)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "since",
            "description": "events till date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "title",
            "description": "events title pattern. Behavior depends on `strict` parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "strict",
            "description": "Changes `title` and `description` search patterns to strict (without %)",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "bounds",
            "in": "query",
            "description": "Returns all events in rectangle. You have to pass coordinates of two points: left-bottom and top-right separated with comma. Example: 55.7558 37.6173,56.7558 38.6173",
            "required": false,
            "type": "string"
          },
          {
            "name": "point",
            "in": "query",
            "description": "Returns all events in circle. You have to pass coordinates the center of circle: Example: 55.7558 37.6173. Also requires distance (in km).",
            "required": false,
            "type": "string"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Make event favorite",
        "description": "",
        "operationId": "makeEventFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get information about one event with specified ID",
        "description": "",
        "operationId": "getEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Change event",
        "description": "",
        "operationId": "updateEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "new event data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/status": {
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Changes status for event (shown or hidden)",
        "description": "",
        "operationId": "setEventStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hidden",
            "in": "query",
            "description": "Additional data to pass to server",
            "required": true,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "canceled",
            "in": "query",
            "description": "Additional data to pass to server",
            "required": true,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/notifications": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get all notifications for event[doing]",
        "description": "",
        "operationId": "getEventNotifications",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notification"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Create new notification for event",
        "description": "",
        "operationId": "addNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "notification_time",
            "in": "query",
            "description": "Datetime for new notification",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "notification_type",
            "in": "query",
            "description": "Predefined type for new notification",
            "required": false,
            "type": "string",
            "enum": [
              "notification-before-three-hours",
              "notification-before-day",
              "notification-before-three-days",
              "notification-before-week",
              "notification-before-quarter-of-hour"
            ]
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/notifications/{UUID}": {
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Update one specified user notification for event",
        "description": "",
        "operationId": "updateNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "notification_time",
            "in": "query",
            "description": "New notification time",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "Notification UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Remove (mute) one specified user notification for event",
        "description": "",
        "operationId": "deleteNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "Notification UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/orders": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get all orders by current user for event[doing]",
        "description": "",
        "operationId": "getEventOrders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Register (buy tickets) by user",
        "description": "",
        "operationId": "addOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "registration_fields",
            "in": "body",
            "description": "JSON string with filled events",
            "required": true,
            "type": "string"
          },
          {
            "name": "tickets",
            "in": "body",
            "description": "JSON string with filled events `tickets:[{uuid:'', count:''}]`",
            "required": true,
            "type": "string"
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Update order by user or administrator",
        "description": "",
        "operationId": "updateOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "body",
            "description": "Statuses [is_pending, approved, rejected, completed, returned_by_organization, payed] can be set only by admin. Values [payment_canceled_by_client, returned_by_client] only by user. Default values: completed (ticketing_locally == false && approvement_required == false), is_pending (ticketing_locally == false && approvement_required == true, wayting_for_payment(ticketing_locally == true && price > 0)",
            "required": true,
            "type": "string",
            "enum": [
              "is_pending",
              "approved",
              "rejected",
              "completed",
              "returned_by_organization",
              "payed",
              "payment_canceled_by_client",
              "returned_by_client"
            ]
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/orders/{UUID}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get one specified order by current user",
        "description": "",
        "operationId": "getOneOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "Order UUID",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "path",
            "description": "Additional fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/ticket_types": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get all ticket types for event[doing]. It's empty if ticketing_locally == false",
        "description": "",
        "operationId": "getEventTicketTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TicketType"
              }
            }
          }
        }
      }
    },
    "/events/{Id}/ticket_types/{UUID}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get one specified ticket type for event",
        "description": "",
        "operationId": "getEventTicketType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "Notification UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketType"
            }
          }
        }
      }
    },
    "/events/{Id}/tickets": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get all tickets by current user for event[doing]",
        "description": "",
        "operationId": "getEventTickets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ticket"
              }
            }
          }
        }
      }
    },
    "/events/{Id}/tickets/{UUID}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get one specified ticket by current user",
        "description": "",
        "operationId": "getOneTicket",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "Ticket UUID",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "path",
            "description": "Additional fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/events/{Id}/favorites": {
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Delete event from favorites",
        "description": "",
        "operationId": "removeFavoriteEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Make event favorite",
        "description": "",
        "operationId": "makeEventFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of event for making favorite",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Search users by name",
        "description": "",
        "operationId": "getUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "first_name",
            "in": "query",
            "description": "Searching by first name",
            "required": false,
            "type": "string"
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Searching by first name",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Searching by full name",
            "required": false,
            "type": "string"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      }
    },
    "/users/feed": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns friends' list of actions (feed)",
        "description": "",
        "operationId": "getFriendsFeed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      }
    },
    "/users/friends/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns list of friends for current user",
        "description": "",
        "operationId": "getFriends",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      }
    },
    "/users/{Id}/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns information about one specified friend",
        "description": "",
        "operationId": "getFriend",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Friends ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities (allowed: type, is_friend, blurred_img_url, uid, random, link, accounts_links, accounts, favored, subscriptions, actions)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      }
    },
    "/users/{Id}/actions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns list of actions for one specified friend",
        "description": "",
        "operationId": "getFriendActions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Friends ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            }
          }
        }
      }
    },
    "/users/{Id}/favorites": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns list of favored events",
        "description": "",
        "operationId": "getFriendFavorites",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Friends ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            }
          }
        }
      }
    },
    "/users/{Id}/subscriptions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns list of subscriptions events",
        "description": "",
        "operationId": "getFriendSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Friends ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            }
          }
        }
      }
    },
    "/users/me/actions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns list of actions for one specified friend",
        "description": "",
        "operationId": "getFriendActions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            }
          }
        }
      }
    },
    "/users/me/favorites": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns list of favored events",
        "description": "",
        "operationId": "getFriendFavorites",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            }
          }
        }
      }
    },
    "/users/me/subscriptions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns list of subscriptions events",
        "description": "",
        "operationId": "getFriendSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_by",
            "in": "query",
            "description": "Order column name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns information about current user",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities (allowed: type, is_friend, uid, random, link, accounts_links, accounts, favored, subscriptions, actions)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {}
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/users/me/devices": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates user token and set's device type for token",
        "description": "",
        "operationId": "updateDevice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "device_token",
            "in": "query",
            "description": "Device ID (socket id or push server id)",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_type",
            "in": "query",
            "description": "Type of client token is assigned",
            "required": true,
            "type": "string",
            "enum": [
              "browser",
              "ios",
              "android"
            ]
          },
          {
            "name": "device_name",
            "in": "query",
            "description": "Name for device (currently not showing to user)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get list of user's devices",
        "description": "",
        "operationId": "getUserDevices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Items count",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields and sub-entities",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Device"
              }
            }
          }
        }
      }
    },
    "/users/me/settings": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user settings for web version",
        "description": "",
        "operationId": "getUserSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user settings for web version",
        "description": "",
        "operationId": "updateUserSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "send_notifications",
            "description": "If true enables notifications",
            "required": true,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "send_notifications_for_favored",
            "description": "If true enables notifications",
            "required": true,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "send_notifications_for_subscriptions",
            "description": "If true enables notifications",
            "required": true,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "send_notifications_new_organizations",
            "description": "If true enables notifications",
            "required": true,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "send_notifications_for_friends",
            "description": "If true enables notifications",
            "required": true,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "name": "privacy_mode",
            "description": "If true enables notifications",
            "required": true,
            "type": "string",
            "enum": [
              "public",
              "only_friends",
              "private"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/statistics/events/{Id}": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Get stats about event",
        "description": "",
        "operationId": "getEventStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "scale",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "minute",
              "hour",
              "day",
              "week",
              "month",
              "year",
              "overall"
            ]
          },
          {
            "name": "since",
            "in": "query",
            "description": "DateTime since",
            "required": true,
            "type": "string"
          },
          {
            "name": "till",
            "in": "query",
            "description": "DateTime till",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Allowed fields: [dynamics, view, fave, unfave, open_site, fave_conversion, open_conversion, view_detail, notifications_sent]. For each field can be used till, since, scale",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Device"
              }
            }
          }
        }
      }
    },
    "/statistics/events/{Id}/orders": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Get orders for event",
        "description": "",
        "operationId": "getStatEventOrders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/statistics/events/{Id}/tickets": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Get tickets for event",
        "description": "",
        "operationId": "getStatEventTickets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/statistics/events/{Id}/participants": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Get participants for event",
        "description": "",
        "operationId": "getStatEventParticipants",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/statistics/organizations/{Id}": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Get stats about organization",
        "description": "",
        "operationId": "getOrganizationStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "scale",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "minute",
              "hour",
              "day",
              "week",
              "month",
              "year",
              "overall"
            ]
          },
          {
            "name": "since",
            "in": "query",
            "description": "DateTime since",
            "required": true,
            "type": "string"
          },
          {
            "name": "till",
            "in": "query",
            "description": "DateTime till",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Allowed fields: [dynamics, view, subscribe, unsubscribe, conversion, audience, notifications_sent, open_site, fave, unfave]. For each field can be used till, since, scale",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Device"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Organization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "short_name": {
          "type": "string"
        },
        "type_id": {
          "type": "integer",
          "format": "int32"
        },
        "img_url": {
          "type": "string"
        },
        "background_img_url": {
          "type": "string"
        },
        "type_name": {
          "type": "string"
        },
        "organization_type_id": {
          "type": "integer",
          "format": "int32"
        },
        "organization_type_order": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "boolean",
          "default": true
        },
        "[description]": {
          "type": "string"
        },
        "[background_medium_img_url]": {
          "type": "string"
        },
        "[background_small_img_url]": {
          "type": "string"
        },
        "[img_medium_url]": {
          "type": "string"
        },
        "[img_small_url]": {
          "type": "string"
        },
        "[site_url]": {
          "type": "string"
        },
        "[facebook_url]": {
          "type": "string"
        },
        "[vk_url]": {
          "type": "string"
        },
        "[default_address]": {
          "type": "string"
        },
        "[subscribed_count]": {
          "type": "integer",
          "format": "int32"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int32"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int32"
        },
        "[is_subscribed]": {
          "type": "boolean"
        },
        "[is_new]": {
          "type": "boolean"
        },
        "[is_private]": {
          "type": "boolean"
        },
        "[brand_color]": {
          "type": "string"
        },
        "[subscription_id]": {
          "type": "integer",
          "format": "int32"
        },
        "[new_events_count]": {
          "type": "integer",
          "format": "int32"
        },
        "[actual_events_count]": {
          "type": "integer",
          "format": "int32"
        },
        "[email]": {
          "type": "string"
        },
        "[events]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "[subscribed]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "[staff]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "[city]": {
          "items": {
            "$ref": "#/definitions/City"
          }
        },
        "[country]": {
          "$ref": "#/definitions/Country"
        },
        "[tariff]": {
          "$ref": "#/definitions/Tariff"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "middle_name": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "avatar_url": {
          "type": "string"
        },
        "[type]": {
          "type": "string",
          "enum": [
            "facebook",
            "vk",
            "google"
          ]
        },
        "[is_friend]": {
          "type": "boolean"
        },
        "[blurred_image_url]": {
          "type": "string"
        },
        "[link]": {
          "type": "string"
        },
        "[subscriptions]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[events_count]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "City": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "en_name": {
          "type": "string"
        },
        "country_id": {
          "type": "string"
        },
        "local_name": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[timediff_seconds]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Country": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "en_name": {
          "type": "string"
        },
        "local_name": {
          "type": "string"
        },
        "language_short": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[language]": {
          "type": "integer",
          "format": "int64"
        },
        "[cities_count]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Tariff": {
      "type": "object",
      "properties": {
        "tariff_id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "[since]": {
          "type": "integer",
          "format": "int64"
        },
        "[till]": {
          "type": "integer",
          "format": "int64"
        },
        "[available_additional_notifications]": {
          "type": "integer",
          "format": "int64"
        },
        "[available_event_publications]": {
          "type": "integer",
          "format": "int64"
        },
        "[available_tickets_selling]": {
          "type": "integer",
          "format": "int64"
        },
        "[available_telegram_bots]": {
          "type": "boolean"
        },
        "[available_slack_bots]": {
          "type": "boolean"
        },
        "[available_auditory_analytics]": {
          "type": "boolean"
        },
        "[available_in_city]": {
          "type": "integer",
          "format": "int64"
        },
        "[price]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "integer",
          "format": "int64"
        },
        "event_id": {
          "type": "integer",
          "format": "int64"
        },
        "notification_time": {
          "type": "integer",
          "format": "int64"
        },
        "[sent_time]": {
          "type": "integer",
          "format": "int64"
        },
        "[notification_type]": {
          "type": "string"
        },
        "[done]": {
          "type": "boolean"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "boolean"
        },
        "text": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "response_id": {
          "type": "string"
        },
        "request_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EventDate": {
      "type": "object",
      "properties": {
        "event_date": {
          "type": "string"
        },
        "[id]": {
          "type": "integer",
          "format": "int64"
        },
        "[start_time]": {
          "type": "string"
        },
        "[end_time]": {
          "type": "string"
        },
        "[start_datetime_utc]": {
          "type": "integer",
          "format": "int64"
        },
        "[end_datetime_utc]": {
          "type": "integer",
          "format": "int64"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[event_id]": {
          "type": "integer",
          "format": "int64"
        },
        "[organization_id]": {
          "type": "integer",
          "format": "int64"
        },
        "[events_count]": {
          "type": "integer",
          "format": "int64"
        },
        "[favored_count]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "required": true
        },
        "title": {
          "type": "string"
        },
        "first_event_date": {
          "type": "integer",
          "format": "int64"
        },
        "last_event_date": {
          "type": "integer",
          "format": "int64"
        },
        "nearest_event_date": {
          "type": "integer",
          "format": "int64"
        },
        "image_vertical_url": {
          "type": "string"
        },
        "image_horizontal_url": {
          "type": "string"
        },
        "organization_id": {
          "type": "integer",
          "format": "int64"
        },
        "[creator_id]": {
          "type": "integer",
          "format": "int64"
        },
        "[is_same_time]": {
          "type": "boolean"
        },
        "[sold_tickets_count]": {
          "type": "integer",
          "format": "int64"
        },
        "[latitude]": {
          "type": "number",
          "format": "float"
        },
        "[longitude]": {
          "type": "number",
          "format": "float"
        },
        "[image_vertical_small_url]": {
          "type": "string"
        },
        "[image_horizontal_small_url]": {
          "type": "string"
        },
        "[image_vertical_medium_url]": {
          "type": "string"
        },
        "[image_horizontal_medium_url]": {
          "type": "string"
        },
        "[image_vertical_large_url]": {
          "type": "string"
        },
        "[image_horizontal_large_url]": {
          "type": "string"
        },
        "[organization_name]": {
          "type": "string"
        },
        "[organization_type_name]": {
          "type": "string"
        },
        "[organization_short_name]": {
          "type": "string"
        },
        "[organization_logo_large_url]": {
          "type": "string"
        },
        "[organization_logo_medium_url]": {
          "type": "string"
        },
        "[organization_logo_small_url]": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[favored_users_count]": {
          "type": "integer",
          "format": "int64"
        },
        "[description]": {
          "type": "string"
        },
        "[location]": {
          "type": "string"
        },
        "[detail_info_url]": {
          "type": "string"
        },
        "[is_favorite]": {
          "type": "boolean"
        },
        "[is_hidden]": {
          "type": "boolean"
        },
        "[tags]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "[notifications]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "[dates]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventDate"
          }
        },
        "[favored]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "[orders]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "[tickets]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ticket"
          }
        },
        "[tickets_count]": {
          "type": "integer",
          "format": "int64"
        },
        "[can_edit]": {
          "type": "boolean"
        },
        "[link]": {
          "type": "string"
        },
        "[public_at]": {
          "type": "string"
        },
        "[registration_required]": {
          "type": "boolean"
        },
        "[registration_approvement_required]": {
          "type": "boolean"
        },
        "[registration_limit_count]": {
          "type": "integer",
          "format": "int64"
        },
        "[ticketing_locally]": {
          "type": "boolean"
        },
        "[registration_locally]": {
          "type": "boolean"
        },
        "[ticket_types]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TicketType"
          }
        },
        "[registration_till]": {
          "type": "string"
        },
        "[registration_approve_status]": {
          "type": "string"
        },
        "[registration_available]": {
          "type": "boolean"
        },
        "[is_registered]": {
          "type": "boolean"
        },
        "[is_free]": {
          "type": "boolean"
        },
        "[min_price]": {
          "type": "int32"
        },
        "[favored_friends_count]": {
          "type": "integer",
          "format": "int64"
        },
        "[actuality]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "NewEvent": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "organization_id": {
          "type": "integer",
          "format": "int64"
        },
        "additional_notification_time": {
          "type": "string",
          "format": "date"
        },
        "location_object": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "float"
            },
            "longitude": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "longitude": {
          "type": "number",
          "format": "float"
        },
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "image_vertical": {
          "type": "string",
          "format": "byte"
        },
        "image_horizontal": {
          "type": "string",
          "format": "byte"
        },
        "detail_info_url": {
          "type": "string"
        },
        "dates": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "event_date": {
                "type": "string",
                "format": "date"
              },
              "start_time": {
                "type": "string"
              },
              "end_time": {
                "type": "string"
              }
            }
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NewOrganization": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "short_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "site_url": {
          "type": "string"
        },
        "default_address": {
          "type": "string"
        },
        "vk_url": {
          "type": "string"
        },
        "facebook_url": {
          "type": "string"
        },
        "type_id": {
          "type": "string",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19
          ]
        },
        "background": {
          "type": "string",
          "format": "byte"
        },
        "logo": {
          "type": "string",
          "format": "byte"
        },
        "detail_info_url": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "Action": {
      "type": "object",
      "properties": {
        "stat_type_id": {
          "type": "integer",
          "format": "int64"
        },
        "event_id": {
          "type": "integer",
          "format": "int64"
        },
        "organization_id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "entity": {
          "type": "integer",
          "format": "int64"
        },
        "[type_code]": {
          "type": "string",
          "enum": [
            "subscribe",
            "fave",
            "unsubscribe",
            "unfave",
            "share_vk",
            "share_fb",
            "share_tw"
          ]
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[user]": {
          "type": "object",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        "[event]": {
          "type": "object",
          "schema": {
            "$ref": "#/definitions/Event"
          }
        },
        "[organization]": {
          "type": "object",
          "schema": {
            "$ref": "#/definitions/Organization"
          }
        }
      }
    },
    "Device": {
      "type": "object",
      "properties": {
        "device_token": {
          "type": "string"
        },
        "client_type": {
          "type": "string"
        },
        "[device_name]": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[expires_on]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Ticket": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "type_code": {
          "type": "string"
        },
        "ticket_type_uuid": {
          "type": "string"
        },
        "ticket_order_uuid": {
          "type": "string"
        },
        "status": {
          "type": "boolean"
        },
        "checkout": {
          "type": "boolean"
        },
        "price": {
          "type": "number"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[ticket_type]": {
          "items": {
            "$ref": "#/definitions/TicketType"
          }
        },
        "[order]": {
          "$ref": "#/definitions/Order"
        },
        "[user]": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "event_id": {
          "type": "string"
        },
        "status_type_code": {
          "type": "string"
        },
        "payed_at": {
          "type": "integer"
        },
        "status_name": {
          "type": "string"
        },
        "[order_content]": {
          "type": "string"
        },
        "[is_canceled]": {
          "type": "boolean"
        },
        "[canceled_at]": {
          "type": "integer"
        },
        "[status_id]": {
          "type": "integer"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[tickets]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ticket"
          }
        },
        "[user]": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "TicketType": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "event_id": {
          "type": "integer"
        },
        "type_code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "[comment]": {
          "type": "string"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[price]": {
          "type": "integer",
          "format": "int64"
        },
        "[sell_start_date]": {
          "type": "integer",
          "format": "int64"
        },
        "[sell_end_date]": {
          "type": "integer",
          "format": "int64"
        },
        "[start_after_ticket_type_uuid]": {
          "type": "integer",
          "format": "int64"
        },
        "[amount]": {
          "type": "integer",
          "format": "int64"
        },
        "[min_count_per_user]": {
          "type": "integer",
          "format": "int64"
        },
        "[max_count_per_user]": {
          "type": "integer",
          "format": "int64"
        },
        "[promocode]": {
          "type": "integer",
          "format": "int64"
        },
        "[promocode_effort]": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "OrganizationType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "order_position": {
          "type": "integer",
          "format": "int64"
        },
        "[created_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[updated_at]": {
          "type": "integer",
          "format": "int64"
        },
        "[organizations]": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about authorization flow, API requests and responses",
    "url": ""
  }
}
